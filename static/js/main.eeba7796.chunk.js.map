{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","components/ContactForm/Form.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","hooks/LocalStorage.jsx","App.js","index.js","components/ContactForm/Form.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","generate","phoneInputId","handleChange","event","target","value","reset","e","preventDefault","className","styles","formLabel","htmlFor","type","pattern","title","required","formInput","onChange","id","addContactBtn","ContactList","contacts","deleteContacts","contactList","map","contactItem","contactName","deleteBtn","onClick","Filter","filterContainer","filterInput","useLocalStorage","contact","initialState","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","PhoneBookApp","contactsList","setContacts","filter","setFilter","mainTitle","find","alert","prevContacts","contactsTitle","currentTarget","normalizedFilter","toLowerCase","includes","handleFilteredContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eeba7796.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterContainer\":\"Filter_filterContainer__3KfUa\",\"filterInput\":\"Filter_filterInput__2o7Sc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainTitle\":\"App_mainTitle__Hn6_v\",\"contactsTitle\":\"App_contactsTitle__2zHNQ\"};","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport styles from './Form.module.css';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameInputId = shortid.generate();\r\n  const phoneInputId = shortid.generate();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.ContactForm}>\r\n      <label className={styles.formLabel} htmlFor={nameInputId}>\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        className={styles.formInput}\r\n        value={name}\r\n        onChange={handleChange}\r\n        id={nameInputId}\r\n      />\r\n      <label className={styles.formLabel} htmlFor={phoneInputId}>\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        className={styles.formInput}\r\n        value={number}\r\n        onChange={handleChange}\r\n        id={phoneInputId}\r\n      />\r\n      <button className={styles.addContactBtn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n// ***Old logic with class*** //\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = shortid.generate();\r\n//   phoneInputId = shortid.generate();\r\n\r\n//   handleChange = event => {\r\n//     const { name, value } = event.currentTarget;\r\n//     this.setState({\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     this.props.addContact(this.state);\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form onSubmit={this.handleSubmit} className={styles.ContactForm}>\r\n//         <label className={styles.formLabel} htmlFor={this.nameInputId}>\r\n//           Name\r\n//         </label>\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//           required\r\n//           className={styles.formInput}\r\n//           value={this.state.name}\r\n//           onChange={this.handleChange}\r\n//           id={this.nameInputId}\r\n//         />\r\n//         <label className={styles.formLabel} htmlFor={this.phoneInputId}>\r\n//           Number\r\n//         </label>\r\n//         <input\r\n//           type=\"tel\"\r\n//           name=\"number\"\r\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//           required\r\n//           className={styles.formInput}\r\n//           value={this.state.number}\r\n//           onChange={this.handleChange}\r\n//           id={this.phoneInputId}\r\n//         />\r\n//         <button className={styles.addContactBtn} type=\"submit\">\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// // ContactForm.propTypes = {\r\n// //   onSubmit: PropTypes.func.isRequired,\r\n// // };\r\n\r\n// export default ContactForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContacts }) => {\r\n  return (\r\n    <ul className={styles.contactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={styles.contactItem}>\r\n          <p className={styles.contactName}>\r\n            {name}: &nbsp;{number}\r\n          </p>\r\n          <button\r\n            className={styles.deleteBtn}\r\n            type=\"button\"\r\n            onClick={() => deleteContacts(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  deleteContacts: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div className={styles.filterContainer}>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useLocalStorage = (contact, initialState) => {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(contact)) ?? initialState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(contact, JSON.stringify(state));\r\n  }, [contact, state]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import { useState } from 'react';\nimport ContactForm from './components/ContactForm/Form.jsx';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport Filter from './components/Filter/Filter.jsx';\nimport contactsList from './data/contacts.json';\nimport useLocalStorage from './hooks/LocalStorage.jsx';\nimport shortid from 'shortid';\nimport styles from './App.module.css';\n\nexport default function PhoneBookApp() {\n  const [contacts, setContacts] = useLocalStorage('contacts', contactsList);\n  const [filter, setFilter] = useState('');\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    contacts.find(contact => contact.name === name || contact.number === number)\n      ? alert(`${name} is already in contacts`)\n      : setContacts(prevContacts => [contact, ...prevContacts]);\n  };\n\n  const deleteContacts = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const onFilterChange = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const handleFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div>\n      <h1 className={styles.mainTitle}>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <h2 className={styles.contactsTitle}>Contacts</h2>\n      <Filter value={filter} onChange={onFilterChange} />\n      <ContactList\n        contacts={handleFilteredContacts()}\n        deleteContacts={deleteContacts}\n      />\n    </div>\n  );\n}\n\n// ***Old logic with class ***///\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   addContact = ({ name, number }) => {\n//     if (this.state.contacts.find(user => user.name === name)) {\n//       console.log(alert(`${name} is already in contacts`));\n//       return;\n//     }\n\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     this.setState(({ contacts }) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   };\n\n//   deleteContacts = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n//     }));\n//   };\n\n//   componentDidMount() {\n//     // console.log('App componentDidMount');\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     // console.log(parsedContacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log('componentDidUpdate');\n\n//     if (this.state.contacts !== prevState.contacts) {\n//       // console.log('Contacts field updated');\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//     // console.log(prevState);\n//     // console.log(this.state);\n//   }\n\n//   onFilterChange = event => {\n//     this.setState({\n//       filter: event.currentTarget.value,\n//     });\n//   };\n\n//   handleFilteredContacts = () => {\n//     const normalizedFilter = this.state.filter.toLowerCase();\n//     return this.state.contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const filteredContacts = this.handleFilteredContacts();\n\n//     return (\n//       <div>\n//         <h1 className={styles.mainTitle}>Phonebook</h1>\n//         <ContactForm addContact={this.addContact} />\n//         <h2 className={styles.contactsTitle}>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.onFilterChange} />\n//         <ContactList\n//           contacts={filteredContacts}\n//           deleteContacts={this.deleteContacts}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"Form_ContactForm__1pCTd\",\"formLabel\":\"Form_formLabel__HoJro\",\"formInput\":\"Form_formInput__2KZsd\",\"addContactBtn\":\"Form_addContactBtn__2NFi3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1Hrr1\",\"contactItem\":\"ContactList_contactItem__15EFU\",\"deleteBtn\":\"ContactList_deleteBtn__ILipA\"};"],"sourceRoot":""}